<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.3.1.RELEASE</version>
	</parent>
	
	<groupId>com.github.abhinavmishra14</groupId>
	<artifactId>restful-webservices</artifactId>
	<version>1.0-SNAPSHOT</version>
    <name>restful-webservices</name>
    <description>RESTFul webservices using Spring Boot</description>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-hateoas</artifactId>
		</dependency>
		
		<!-- Dependency for monitoring and audit [Start]-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		
		<dependency>
			<groupId>org.springframework.data</groupId>
			<!-- Spring Data REST HAL Browser is deprecated! Prefer the HAL Explorer (artifactId: spring-data-rest-hal-explorer)! -->
			<!-- <artifactId>spring-data-rest-hal-browser</artifactId> -->
			<!--  Use: http://127.0.0.1:8181/explorer to open the HAL Explorer -->
			<artifactId>spring-data-rest-hal-explorer</artifactId>
		</dependency>
	   <!-- Dependency for monitoring and audit [End]-->
		
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
		
		<dependency>
		    <groupId>org.springframework.boot</groupId>
		    <artifactId>spring-boot-starter</artifactId>
		    <exclusions>
		        <exclusion>
		            <groupId>org.springframework.boot</groupId>
		            <artifactId>spring-boot-starter-logging</artifactId>
		        </exclusion>
		    </exclusions>
		</dependency>
		
		<dependency>
		    <groupId>org.springframework.boot</groupId>
		    <artifactId>spring-boot-starter-log4j2</artifactId>
		</dependency>
		
		<dependency>
		    <groupId>org.apache.logging.log4j</groupId>
		    <artifactId>log4j-web</artifactId>
		</dependency>
		
		<dependency>
			<groupId>com.fasterxml.jackson.dataformat</groupId>
			<artifactId>jackson-dataformat-yaml</artifactId>
		</dependency>

	    <!-- Log4j2 Supports Async loggers. These loggers provide a drastic improvement 
			in performance compared to their synchronous counterparts. 
			Async Loggers internally use a library called Disruptor for asynchronous logging. 
			Set the system property to use Async logger: log4j2.contextSelector=org.apache.logging.log4j.core.async.AsyncLoggerContextSelector 
			java -Dlog4j2.contextSelector=org.apache.logging.log4j.core.async.AsyncLoggerContextSelector -jar target/logging-log4j2-1.0.jar 
		-->
		<dependency>
			<groupId>com.lmax</groupId>
			<artifactId>disruptor</artifactId>
			<version>3.4.2</version>
		</dependency>
		
		<!-- Added this dependency for XML content negotiation, By default all responses are returned as JSON -->
		<!-- For xml content negotiation in spring web mvc/rest architecture, you don't have to make any code changes.
		     All you need to do is to add this dependency -->
		<dependency>
			<groupId>com.fasterxml.jackson.dataformat</groupId>
			<artifactId>jackson-dataformat-xml</artifactId>
		</dependency>
		
		<!-- Dependency for swagger open api v3 [Start]-->
		<dependency>
	      <groupId>org.springdoc</groupId>
	      <artifactId>springdoc-openapi-ui</artifactId>
	      <version>1.4.2</version>
	    </dependency>
		<!-- The support for Spring Hateoas is available using the dependency springdoc-openapi-hateoas. 
			The projects that use Spring Hateoas should combine this dependency with 
			the springdoc-openapi-ui dependency. This dependency enables the support 
			of Spring Hateoas format. -->
	    <dependency>
	      <groupId>org.springdoc</groupId>
	      <artifactId>springdoc-openapi-hateoas</artifactId>
	      <version>1.4.2</version>
	    </dependency>
		<!-- Dependency for swagger open api v3 [End]-->
		
		<!-- For Hot Reloading -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		
		<dependency>
		    <groupId>org.apache.commons</groupId>
		    <artifactId>commons-lang3</artifactId>
		</dependency>
		
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
		</dependency>
		
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<groupId>org.junit.vintage</groupId>
					<artifactId>junit-vintage-engine</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
	</dependencies>

	<properties>
		<java.version>1.8</java.version>
	</properties>

	<build>
		<plugins>
			<!-- Project is JDK 1.8 compliant, so source and target version should be 1.8 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.3</version><!--$NO-MVN-MAN-VER$-->
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>
			
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>copy-dependencies</id>
						<phase>package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- Checkstyle integration -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-checkstyle-plugin</artifactId>
				<version>3.1.0</version>
				<executions>
					<execution>
						<id>checkstyle</id>
						<phase>package</phase>
						<goals>
							<goal>check</goal>
						</goals>
						<configuration>
							<failOnViolation>true</failOnViolation>
							<configLocation>${basedir}/checkstyle.xml</configLocation>
							<includes>com/**/*.java</includes>
							<excludes>com/github/abhinavmishra14/**/model/*.java,com/github/abhinavmishra14/**/*Tests.java</excludes>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- PMD Integration, you can also run it directly using mvn pmd:pmd or pmd:check -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jxr-plugin</artifactId>
				<version>3.0.0</version>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>jxr</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-pmd-plugin</artifactId>
				<version>3.12.0</version>
				<configuration>
					<!-- Run PMD on the tests. Default: false -->
					<includeTests>false</includeTests>

					<!-- Link the violation line numbers to the source xref. Links will 
						be created automatically if the jxr plugin is being used. Default: true -->
					<linkXRef>true</linkXRef>

					<!-- Set the output format type, in addition to the HTML report. Must 
						be one of: "none", "csv", "xml", "txt" or the full class name of the PMD 
						renderer to use. See the net.sourceforge.pmd.renderers package javadoc for 
						available renderers. XML is required if the pmd:check goal is being used. 
						Default: xml -->
					<format>xml</format>

					<!-- Skip the PMD checks. Most useful on the command line via "-Dpmd.skip=true" -->
					<skip>false</skip>

					<!-- Print details of check failures to build output. -->
					<verbose>true</verbose>

					<!-- A list of files to include from checking. Can contain Ant-style 
						wildcards and double wildcards. Defaults to **\/*.java. -->
					<includes>
						<include>com/**/*.java</include>
					</includes>

					<!-- Fail build if there are high priority warnings during pmd:check. 
						Default value is 5 -->
					<failurePriority>1</failurePriority>

					<!-- A list of files to exclude from checking. Can contain Ant-style 
						wildcards and double wildcards. We are not excluding anything here. -->
					<excludes>
						<exclude>com/github/abhinavmishra14/**/model/*.java,com/github/abhinavmishra14/**/*Test.java,com/github/abhinavmishra14/**/*Tests.java</exclude>
					</excludes>

					<!-- The output directory for the final HTML report. -->
					<outputDirectory>${project.reporting.outputDirectory}</outputDirectory>

					<!-- The output directory for the intermediate XML report. -->
					<targetDirectory>${project.build.directory}</targetDirectory>

					<rulesets>
						<!-- Multiple rule set xmls can be included here. -->
						<ruleset>${basedir}/pmd_ruleset.xml</ruleset>
					</rulesets>
				</configuration>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>check</goal>
							<!-- Creates a report for PMD's copy paste detector tool -->
							<goal>cpd</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- SpotBugs looks for bugs in Java programs. It is based on the concept 
				of bug patterns. A bug pattern is a code idiom that is often an error. Bug 
				patterns arise for a variety of reasons: - Difficult language features - 
				Misunderstood API methods - Misunderstood invariants when code is modified 
				during maintenance - Garden variety mistakes: typos, use of the wrong boolean 
				operator -->
			<!-- Post java9, findbugs is no longer maintained and we need to use spotbugs. 
				It is successor of findbugs -->
			<plugin>
				<groupId>com.github.spotbugs</groupId>
				<artifactId>spotbugs-maven-plugin</artifactId>
				<version>3.1.12.2</version>
				<dependencies>
					<!-- overwrite dependency on spotbugs if you want to specify the version 
						of spotbugs -->
					<dependency>
						<groupId>com.github.spotbugs</groupId>
						<artifactId>spotbugs</artifactId>
						<version>4.0.0-beta4</version>
					</dependency>
				</dependencies>
				<configuration>
					<!-- SpotBugs will show what is doing during analysis. -->
					<debug>false</debug>
					<!-- Enables analysis which takes more memory but finds more bugs. If 
						you run out of memory, changes the value of the effort element to 'min'. 
						Min|Default|Max are possible values. -->
					<effort>Min</effort>
					<!-- Reports all bugs (other values are High|Normal|Low|Exp|Ignore) -->
					<threshold>High</threshold>
					<xmlOutput>true</xmlOutput>
					<!-- Optional directory to save SpotBugs xdoc xml report -->
					<xmlOutputDirectory>${project.reporting.outputDirectory}</xmlOutputDirectory>
					<!-- Stops the build if violation found -->
					<failOnError>true</failOnError>
					<!-- Indicates to analyze only given java packages, We are allowing 
						everything here. -->
					<!-- <onlyAnalyze>com.*</onlyAnalyze> -->
				</configuration>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<!-- spotbugs goal analyses target project by SpotBugs -->
							<!-- <goal>spotbugs</goal> -->
							<!-- check goal runs analysis like spotbugs goal, and make the build 
								failed if it found any bugs. -->
							<goal>check</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
	
	<repositories>
		<repository>
			<id>spring-snapshots</id>
			<name>Spring Snapshots</name>
			<url>https://repo.spring.io/snapshot</url>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
		
		<repository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/milestone</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
		
		<repository>
			<id>jfrog-snapshots</id>
			<name>JFROG Snapshots</name>
			<url>http://oss.jfrog.org/artifactory/oss-snapshot-local</url>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
	</repositories>

	<pluginRepositories>
		<pluginRepository>
			<id>spring-snapshots</id>
			<name>Spring Snapshots</name>
			<url>https://repo.spring.io/snapshot</url>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</pluginRepository>
		<pluginRepository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/milestone</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</pluginRepository>
	</pluginRepositories>
</project>