<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.github.abhinavmishra14</groupId>
	<artifactId>spring-boot-app</artifactId>
	<version>1.0-SNAPSHOT</version>
	
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.3.3.RELEASE</version>
	</parent>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		
		
	</dependencies>

	<properties>
		<java.version>1.8</java.version>
	</properties>

	<build>
		<plugins>
			<!-- Project is JDK 1.8 compliant, so source and target version should 
				be 1.8 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.3</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>copy-dependencies</id>
						<phase>package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- Checkstyle integration -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-checkstyle-plugin</artifactId>
				<version>3.1.0</version>
				<executions>
					<execution>
						<id>checkstyle</id>
						<phase>package</phase>
						<goals>
							<goal>check</goal>
						</goals>
						<configuration>
							<failOnViolation>true</failOnViolation>
							<configLocation>${basedir}/checkstyle.xml</configLocation>
							<includes>com/**/*.java</includes>
							<excludes>com/github/abhinavmishra14/**/pojo/*.java</excludes>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- PMD Integration, you can also run it directly using mvn pmd:pmd or 
				pmd:check -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jxr-plugin</artifactId>
				<version>3.0.0</version>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>jxr</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-pmd-plugin</artifactId>
				<version>3.12.0</version>
				<configuration>
					<!-- Run PMD on the tests. Default: false -->
					<includeTests>false</includeTests>

					<!-- Link the violation line numbers to the source xref. Links will 
						be created automatically if the jxr plugin is being used. Default: true -->
					<linkXRef>true</linkXRef>

					<!-- Set the output format type, in addition to the HTML report. Must 
						be one of: "none", "csv", "xml", "txt" or the full class name of the PMD 
						renderer to use. See the net.sourceforge.pmd.renderers package javadoc for 
						available renderers. XML is required if the pmd:check goal is being used. 
						Default: xml -->
					<format>xml</format>

					<!-- Skip the PMD checks. Most useful on the command line via "-Dpmd.skip=true" -->
					<skip>false</skip>

					<!-- Print details of check failures to build output. -->
					<verbose>true</verbose>

					<!-- A list of files to include from checking. Can contain Ant-style 
						wildcards and double wildcards. Defaults to **\/*.java. -->
					<includes>
						<include>com/**/*.java</include>
					</includes>

					<!-- Fail build if there are high priority warnings during pmd:check. 
						Default value is 5 -->
					<failurePriority>1</failurePriority>

					<!-- A list of files to exclude from checking. Can contain Ant-style 
						wildcards and double wildcards. We are not excluding anything here. -->
					<excludes>
						<exclude>com/github/abhinavmishra14/**/pojo/*.java</exclude>
					</excludes>

					<!-- The output directory for the final HTML report. -->
					<outputDirectory>${project.reporting.outputDirectory}</outputDirectory>

					<!-- The output directory for the intermediate XML report. -->
					<targetDirectory>${project.build.directory}</targetDirectory>

					<rulesets>
						<!-- Multiple rule set xmls can be included here. -->
						<ruleset>${basedir}/pmd_ruleset.xml</ruleset>
					</rulesets>
				</configuration>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>check</goal>
							<!-- Creates a report for PMD's copy paste detector tool -->
							<goal>cpd</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- SpotBugs looks for bugs in Java programs. It is based on the concept 
				of bug patterns. A bug pattern is a code idiom that is often an error. Bug 
				patterns arise for a variety of reasons: - Difficult language features - 
				Misunderstood API methods - Misunderstood invariants when code is modified 
				during maintenance - Garden variety mistakes: typos, use of the wrong boolean 
				operator -->
			<!-- Post java9, findbugs is no longer maintained and we need to use spotbugs. 
				It is successor of findbugs -->
			<plugin>
				<groupId>com.github.spotbugs</groupId>
				<artifactId>spotbugs-maven-plugin</artifactId>
				<version>3.1.12.2</version>
				<dependencies>
					<!-- overwrite dependency on spotbugs if you want to specify the version 
						of spotbugs -->
					<dependency>
						<groupId>com.github.spotbugs</groupId>
						<artifactId>spotbugs</artifactId>
						<version>4.0.0-beta4</version>
					</dependency>
				</dependencies>
				<configuration>
					<!-- SpotBugs will show what is doing during analysis. -->
					<debug>false</debug>
					<!-- Enables analysis which takes more memory but finds more bugs. If 
						you run out of memory, changes the value of the effort element to 'min'. 
						Min|Default|Max are possible values. -->
					<effort>Min</effort>
					<!-- Reports all bugs (other values are High|Normal|Low|Exp|Ignore) -->
					<threshold>High</threshold>
					<xmlOutput>true</xmlOutput>
					<!-- Optional directory to save SpotBugs xdoc xml report -->
					<xmlOutputDirectory>${project.reporting.outputDirectory}</xmlOutputDirectory>
					<!-- Stops the build if violation found -->
					<failOnError>true</failOnError>
					<!-- Indicates to analyze only given java packages, We are allowing 
						everything here. -->
					<!-- <onlyAnalyze>com.*</onlyAnalyze> -->
				</configuration>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<!-- spotbugs goal analyses target project by SpotBugs -->
							<!-- <goal>spotbugs</goal> -->
							<!-- check goal runs analysis like spotbugs goal, and make the build 
								failed if it found any bugs. -->
							<goal>check</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>
